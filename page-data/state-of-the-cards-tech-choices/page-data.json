{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/state-of-the-cards-tech-choices/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Journal"}},"markdownRemark":{"id":"58f09b51-615e-59b9-a643-0719612a0719","html":"<p>This entry outlines the technical decisions that have been made for building the\ncard game website that my and my project group came up with. We will make a\nmodular card game with a card game editor where users can make up their own rules\nfor games.</p>\n<p>My project group consists of <a href=\"https://github.com/ThowV\">Thomas</a>,\n<a href=\"https://github.com/LutzenH\">Lutzen</a>, <a href=\"https://github.com/Prusias\">Mike</a> and\n<a href=\"https://github.com/mees-\">me</a>.</p>\n<h3>Frontend framework - <a href=\"https://reactjs.org\">React</a></h3>\n<p>For the frontend framework we decided to go with react. This is because react is\nonly the view layer and it leaves us free to choose whatever libraries we want\nto use for the state and data-fetching, the controller and model.<br>\nFurthermore, react is very popular and has a lot of community support. There are\ntons of available resources to help learn react and React, like angular, has a\nbig company supporting it together with the open source community.</p>\n<h3>API server - <a href=\"https://nodejs.org\">Node.js</a></h3>\n<p>Node.js is chrome’s V8 javascript engine transplanted into a server scenario.\nThey basically removed the DOM and added IO API’s in order to facilitate server\ndevelopment. Node has <a href=\"https://www.npmjs.com\">a huge library of packages</a> which\ncan greatly simplify development. Express is the server framework we will use.\nExpress, while not the newest and coolest framework on the block, is very robust\nand well tested. It is one of the most popular npm packages and it’s probably\nthe most popular web framework for Node.</p>\n<h3>File server - <a href=\"https://www.nginx.com/\">NGINX</a></h3>\n<p>Since we are building a PWA (progressive web app), we only need to serve a\nstatic bundle as our app, the app will then fetch all the data it needs from the\nAPI by itself. NGINX is a very stable, battle-tested web server. It supports\nadvanced configuration but also isn’t hard to work with. NGINX can also serve as\na reverse-proxy for our api, which allows us to route requests to the same\ndomain to multiple different servers</p>","frontmatter":{"title":"stateofthe.cards technical choices","location":"Groningen","date":"Sunday, May 10th 2020","time":"17:05 PM"},"excerpt":"This entry outlines the technical decisions that have been made for building the\ncard game website that my and my project group came up with…"}},"pageContext":{"slug":"/state-of-the-cards-tech-choices/","previous":{"fields":{"slug":"/jwt-service/"},"frontmatter":{"title":"JWT service"}},"next":{"fields":{"slug":"/jwt-continued/"},"frontmatter":{"title":"JWT continued"}}}},
    "staticQueryHashes": ["2667034088","3000541721","671806358"]}